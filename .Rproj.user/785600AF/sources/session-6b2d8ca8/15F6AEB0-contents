# Carregar pacotes necessários
library(deaR)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tibble)

# -------------------------------
# 1. SIMULAÇÃO DOS DADOS (como antes)
# -------------------------------
set.seed(42)  # para reprodutibilidade

# Definir regiões e estados (divisão simplificada)
regioes_estados <- list(
  Norte = c("AC", "AM", "AP", "PA", "RO", "RR", "TO"),
  Nordeste = c("AL", "BA", "CE", "MA", "PB", "PE", "PI", "RN", "SE"),
  `Centro-Oeste` = c("DF", "GO", "MT", "MS"),
  Sudeste = c("ES", "MG", "RJ", "SP"),
  Sul = c("PR", "RS", "SC")
)

# Número total de municípios
n_municipios <- 5432

# Criar uma base com identificador, região e estado
municipios_info <- data.frame(
  municipio = paste0("mun_", 1:n_municipios),
  stringsAsFactors = FALSE
)

# Atribuir região aleatoriamente (com pesos arbitrários)
regioes <- names(regioes_estados)
municipios_info$region <- sample(regioes, n_municipios, replace = TRUE, 
                                 prob = c(0.12, 0.40, 0.08, 0.25, 0.15))

# Atribuir estado conforme a região
municipios_info$state <- sapply(municipios_info$region, function(reg) {
  sample(regioes_estados[[reg]], 1)
})

# Criar painel com dados para 3 períodos: 2019, 2021 e 2023
periodos <- c(2019, 2021, 2023)
df_panel <- merge(municipios_info, data.frame(ano = periodos), all = TRUE)

# Definir fatores de efeito para gasto e IDEB
period_factor <- c("2019" = 1, "2021" = 1.05, "2023" = 1.10)
region_multiplier <- c("Norte" = 0.9, "Nordeste" = 0.95, "Centro-Oeste" = 1.0, 
                       "Sudeste" = 1.1, "Sul" = 1.05)
region_ideb_adj <- c("Norte" = -2, "Nordeste" = -1, "Centro-Oeste" = 0, 
                     "Sudeste" = +1, "Sul" = +0.5)

# Gerar variáveis simuladas: gasto_aluno (input) e ideb (output)
df_panel <- df_panel %>%
  rowwise() %>%
  mutate(
    base_gasto = runif(1, min = 500, max = 1500),
    gasto_aluno = base_gasto * period_factor[as.character(ano)] * region_multiplier[region] * runif(1, 0.9, 1.1),
    ideb = 50 + 0.01 * gasto_aluno + region_ideb_adj[region] + rnorm(1, mean = 0, sd = 2)
  ) %>%
  ungroup() %>%
  select(municipio, state, region, ano, gasto_aluno, ideb)

# -------------------------------
# 2. TRANSFORMAÇÃO PARA FORMATO HORIZONTAL (WIDE)
# -------------------------------
# Cada município terá uma única linha com variáveis para cada período
data_wide <- df_panel %>%
  pivot_wider(
    id_cols = c(municipio, state, region),
    names_from = ano,
    values_from = c(gasto_aluno, ideb),
    names_sep = "."
  )

# Verifique as primeiras linhas
head(data_wide)
str(dados_mq)

# Criar um data frame com apenas as colunas numéricas de inputs e outputs
df_malmquist <- data_wide %>%
  select(municipio, 
         `gasto_aluno.2019`, `gasto_aluno.2021`, `gasto_aluno.2023`,
         `ideb.2019`, `ideb.2021`, `ideb.2023`) %>%
  column_to_rownames(var = "municipio")

# Verifique a estrutura para garantir que só haja colunas numéricas
str(df_malmquist)


#################################################################################

# -------------------------------
# 4. CÁLCULO DO ÍNDICE DE MALMSQUIST COM make_malmquist
# -------------------------------
# Especificamos nper = 3, pois temos 3 períodos.
malmquist_model <- make_malmquist(
  datadea = dados_mq,
  arrangement = "horizontal",
  nper = 3,
  inputs = 2,
  outputs = 3)

# Exibir o resumo do modelo
summary(malmquist_model)

# Extrair os resultados do Malmquist (MI, EC, TC)
results <- malmquist_model$eff

# -------------------------------
# 5. JUNÇÃO DOS RESULTADOS COM INFORMAÇÕES DE REGIÃO E ESTADO
# -------------------------------
# Os dados wide ainda possuem as colunas region e state, então vamos extrair essas informações.
lookup <- dados_full %>% select(nome, sigla, regiao)
results <- merge(results, lookup, by.x = "nome", by.y = "nome", all.x = TRUE)

head(results)

# -------------------------------
# 6. ANÁLISE VISUAL DOS RESULTADOS POR REGIÃO
# -------------------------------
# Boxplot do Índice Malmquist (MI) por região
p1 <- ggplot(results, aes(x = region, y = MI)) +
  geom_boxplot() +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
  labs(title = "Índice de Malmquist (MI) por Região",
       x = "Região",
       y = "Índice Malmquist") +
  theme_minimal()

# Boxplot da Efficiency Change (EC) por região
p2 <- ggplot(results, aes(x = region, y = EC)) +
  geom_boxplot() +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
  labs(title = "Mudança de Eficiência (EC) por Região",
       x = "Região",
       y = "Efficiency Change") +
  theme_minimal()

# Boxplot da Technological Change (TC) por região
p3 <- ggplot(results, aes(x = region, y = TC)) +
  geom_boxplot() +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
  labs(title = "Mudança Tecnológica (TC) por Região",
       x = "Região",
       y = "Technological Change") +
  theme_minimal()

# Exibir os gráficos
print(p1)
print(p2)
print(p3)

# -------------------------------
# 7. ANÁLISE POR REGIÃO: RESULTADOS ISOLADOS POR ESTADO
# -------------------------------
# Boxplot do MI por estado, separado por região (usando facet_wrap)
p4 <- ggplot(results, aes(x = state, y = MI)) +
  geom_boxplot() +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
  labs(title = "Índice de Malmquist (MI) por Estado, Separado por Região",
       x = "Estado",
       y = "Índice Malmquist") +
  facet_wrap(~ region, scales = "free_x") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p4)

# Boxplot da Efficiency Change (EC) por estado, separado por região
p5 <- ggplot(results, aes(x = state, y = EC)) +
  geom_boxplot() +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
  labs(title = "Mudança de Eficiência (EC) por Estado, Separado por Região",
       x = "Estado",
       y = "Efficiency Change") +
  facet_wrap(~ region, scales = "free_x") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p5)

# -------------------------------
# 8. RESUMO ESTATÍSTICO DOS ÍNDICES
# -------------------------------
# Resumo por Região (MI, EC e TC)
summary_region <- results %>%
  group_by(region) %>%
  summarise(
    count = n(),
    mean_MI = mean(MI, na.rm = TRUE),
    median_MI = median(MI, na.rm = TRUE),
    sd_MI = sd(MI, na.rm = TRUE),
    mean_EC = mean(EC, na.rm = TRUE),
    median_EC = median(EC, na.rm = TRUE),
    sd_EC = sd(EC, na.rm = TRUE),
    mean_TC = mean(TC, na.rm = TRUE),
    median_TC = median(TC, na.rm = TRUE),
    sd_TC = sd(TC, na.rm = TRUE)
  )
print(summary_region)

# Resumo por Região e Estado
summary_region_state <- results %>%
  group_by(region, state) %>%
  summarise(
    count = n(),
    mean_MI = mean(MI, na.rm = TRUE),
    median_MI = median(MI, na.rm = TRUE),
    sd_MI = sd(MI, na.rm = TRUE),
    mean_EC = mean(EC, na.rm = TRUE),
    median_EC = median(EC, na.rm = TRUE),
    sd_EC = sd(EC, na.rm = TRUE),
    mean_TC = mean(TC, na.rm = TRUE),
    median_TC = median(TC, na.rm = TRUE),
    sd_TC = sd(TC, na.rm = TRUE)
  )
print(summary_region_state)
