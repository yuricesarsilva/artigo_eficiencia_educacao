# Carregar pacotes necessários
library(deaR)
library(dplyr)
library(tidyr)
library(ggplot2)
library(tibble)

# 1. SIMULAÇÃO DOS DADOS

set.seed(42)

# Definir regiões e estados (divisão simplificada)
regioes_estados <- list(
  Norte = c("AC", "AM", "AP", "PA", "RO", "RR", "TO"),
  Nordeste = c("AL", "BA", "CE", "MA", "PB", "PE", "PI", "RN", "SE"),
  `Centro-Oeste` = c("DF", "GO", "MT", "MS"),
  Sudeste = c("ES", "MG", "RJ", "SP"),
  Sul = c("PR", "RS", "SC")
)

# Número total de municípios
n_municipios <- 5432

# Criar uma base com identificador, região e estado
municipios_info <- data.frame(
  municipio = paste0("mun_", 1:n_municipios),
  stringsAsFactors = FALSE
)

# Atribuir região aleatoriamente (usando pesos arbitrários)
regioes <- names(regioes_estados)
municipios_info$region <- sample(regioes, n_municipios, replace = TRUE,
                                 prob = c(0.12, 0.40, 0.08, 0.25, 0.15))

# Atribuir estado conforme a região sorteada
municipios_info$state <- sapply(municipios_info$region, function(reg) {
  sample(regioes_estados[[reg]], 1)
})

# Criar dados em formato “long” para os períodos 2019, 2021 e 2023
periodos <- c(2019, 2021, 2023)
df_panel <- merge(municipios_info, data.frame(ano = periodos), all = TRUE)

# Definir efeitos para simulação dos dados:
period_factor <- c("2019" = 1, "2021" = 1.05, "2023" = 1.10)
region_multiplier <- c("Norte" = 0.9, "Nordeste" = 0.95, "Centro-Oeste" = 1.0,
                       "Sudeste" = 1.1, "Sul" = 1.05)
region_ideb_adj <- c("Norte" = -2, "Nordeste" = -1, "Centro-Oeste" = 0,
                     "Sudeste" = 1, "Sul" = 0.5)

# Gerar as variáveis:
df_panel <- df_panel %>%
  rowwise() %>%
  mutate(
    base_gasto = runif(1, min = 500, max = 1500),
    # Gasto por aluno (input) com efeito de período, região e ruído aleatório
    gasto_aluno = base_gasto *
      period_factor[as.character(ano)] *
      region_multiplier[region] *
      runif(1, 0.9, 1.1),
    # IDEB (output): função linear do gasto, com ajuste regional e ruído normal
    ideb = 50 + 0.01 * gasto_aluno + region_ideb_adj[region] + rnorm(1, mean = 0, sd = 2)
  ) %>%
  ungroup() %>%
  select(municipio, state, region, ano, gasto_aluno, ideb)

# 2. CONVERSÃO PARA FORMATO WIDE
# O malmquist_index requer que cada DMU (município) tenha os dados de todos os períodos em uma única linha.
data_wide <- df_panel %>%
  pivot_wider(
    id_cols = c(municipio, state, region),
    names_from = ano,
    values_from = c(gasto_aluno, ideb),
    names_sep = "."
  )

# Visualize as primeiras linhas para conferir
head(data_wide)

# 3. CRIAÇÃO DO OBJETO DEA COM make_deadata
# Selecionamos somente as colunas numéricas de inputs e outputs
data_dea <- make_deadata(
  data = data_wide %>% select(municipio,
                              gasto_aluno.2019, gasto_aluno.2021, gasto_aluno.2023,
                              ideb.2019, ideb.2021, ideb.2023),
  dmus = "municipio",
  ni = 3, no = 3,
  inputs = c("gasto_aluno.2019", "gasto_aluno.2021", "gasto_aluno.2023"),
  outputs = c("ideb.2019", "ideb.2021", "ideb.2023")
)

# 4. CÁLCULO DO ÍNDICE DE MALMSQUIST
# Conforme a documentação, usamos malmquist_index com nper = 3 (três períodos),
# orientação "in" e RTS "vrs".
malmquist_obj <- malmquist_index(deadata=data_dea, orientation = "in", rts = "vrs")

# Exibir resumo do modelo Malmquist
print(summary(malmquist_obj))

# 5. EXTRAÇÃO DOS RESULTADOS
# O objeto malmquist_obj é uma lista com elementos para cada transição de período.
# Para ilustrar, vamos extrair os resultados de cada período e combiná-los.
results_list <- lapply(names(malmquist_obj), function(period) {
  obj <- malmquist_obj[[period]]
  # O summary() para cada período retorna os índices; convertemos para data frame.
  summ <- summary(obj)
  summ_df <- as.data.frame(summ)
  summ_df$period <- period
  return(summ_df)
})

# Combinar os resultados em um único data frame
results_all <- do.call(rbind, results_list)
head(results_all)

# Para unir com informações de região e estado, usamos a chave 'municipio' que está em data_wide.
# Supondo que a coluna de identificação ficou em "row.names" após o summary(), vamos ajustar:
if (!"municipio" %in% colnames(results_all)) {
  results_all <- results_all %>%
    tibble::rownames_to_column(var = "municipio")
}

# Unir com as informações originais (state e region)
results_all <- merge(results_all, data_wide %>% select(municipio, state, region),
                     by = "municipio", all.x = TRUE)

# Visualize os resultados combinados
head(results_all)

# 6. ANÁLISE VISUAL: BOXPLOTS POR REGIÃO
# (Atenção: os nomes das colunas dos índices podem variar conforme a versão.
# Neste exemplo, supomos que as colunas MI, EC e TC existam no resumo.)
p_MI <- ggplot(results_all, aes(x = region, y = MI)) +
  geom_boxplot() +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
  labs(title = "Índice Malmquist (MI) por Região", x = "Região", y = "MI") +
  theme_minimal()

p_EC <- ggplot(results_all, aes(x = region, y = EC)) +
  geom_boxplot() +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
  labs(title = "Efficiency Change (EC) por Região", x = "Região", y = "EC") +
  theme_minimal()

p_TC <- ggplot(results_all, aes(x = region, y = TC)) +
  geom_boxplot() +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
  labs(title = "Technological Change (TC) por Região", x = "Região", y = "TC") +
  theme_minimal()

print(p_MI)
print(p_EC)
print(p_TC)

# 7. ANÁLISE POR REGIÃO: BOXPLOTS DOS ÍNDICES POR ESTADO (usando facet_wrap)
p_state_MI <- ggplot(results_all, aes(x = state, y = MI)) +
  geom_boxplot() +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
  facet_wrap(~ region, scales = "free_x") +
  labs(title = "MI por Estado, Separado por Região", x = "Estado", y = "MI") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p_state_MI)

# 8. RESUMOS ESTATÍSTICOS POR REGIÃO E POR ESTADO
summary_region <- results_all %>%
  group_by(region) %>%
  summarise(
    count = n(),
    mean_MI = mean(MI, na.rm = TRUE),
    median_MI = median(MI, na.rm = TRUE),
    sd_MI = sd(MI, na.rm = TRUE),
    mean_EC = mean(EC, na.rm = TRUE),
    median_EC = median(EC, na.rm = TRUE),
    sd_EC = sd(EC, na.rm = TRUE),
    mean_TC = mean(TC, na.rm = TRUE),
    median_TC = median(TC, na.rm = TRUE),
    sd_TC = sd(TC, na.rm = TRUE)
  )
print(summary_region)

summary_region_state <- results_all %>%
  group_by(region, state) %>%
  summarise(
    count = n(),
    mean_MI = mean(MI, na.rm = TRUE),
    median_MI = median(MI, na.rm = TRUE),
    sd_MI = sd(MI, na.rm = TRUE),
    mean_EC = mean(EC, na.rm = TRUE),
    median_EC = median(EC, na.rm = TRUE),
    sd_EC = sd(EC, na.rm = TRUE),
    mean_TC = mean(TC, na.rm = TRUE),
    median_TC = median(TC, na.rm = TRUE),
    sd_TC = sd(TC, na.rm = TRUE)
  )
print(summary_region_state)
