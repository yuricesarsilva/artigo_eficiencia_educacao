g2021 <- ggplot(dados_full, aes(x = desp_2021, y = ideb_2021)) +
geom_point(aes(colour = sigla), size = 2) +
geom_line(data = frontier2, aes(x = desp_2021, y = ideb_2021),
color = "red", size = 1) +
geom_label_repel(data = filter(dados_full, eficiencia == 100),
aes(label = paste(nome, sigla, sep = " - ")),
fill = alpha("white", 0.5),
box.padding   = 0.5,
point.padding = 0.5,
segment.color = 'red',
size = 3) +
labs(
x = "Despesa média por aluno (R$)",
y = "IDEB",
title = "DEA 2021",
colour = "Estado"
) +
theme_classic()
g2021
# BoxPlot
bp2021 <- ggplot(dados_full, aes(x = sigla, y = eficiencia, fill = sigla)) +
geom_boxplot() +
stat_summary(fun = median, geom = "text",
aes(label = round(..y.., 1)),
vjust = -0.5,
color = "black",
size = 3) +
stat_summary(fun = function(x) quantile(x, probs = 0.25), geom = "text",
aes(label = round(..y.., 1)),
hjust = -3, vjust = 1.2, color = "black", size = 2) +
stat_summary(fun = function(x) quantile(x, probs = 0.75), geom = "text",
aes(label = round(..y.., 1)),
hjust = -3, vjust = -0.5, color = "black", size = 2) +
labs(x = "Estado", y = "Eficiência", title = "Boxplot da Eficiência por Estado - 2021") +
theme_classic() + guides(fill = FALSE)
bp2021
################################################################################
# Maps
################################################################################
# Leia municípios (sf) e já crie o cod_ibge
muni <- read_municipality(year = 2020) %>%
mutate(cod_ibge = as.character(code_muni))
# Prepare seu df de eficiência
df_eff <- dados_full %>%
mutate(cod_ibge = str_pad(as.character(cod_ibge), width = 7, pad = "0"))
# Junte garantindo que o primeiro objeto é um sf
dados_full_mapa <- muni %>%
left_join(df_eff, by = "cod_ibge")
# Crie a categoria de eficiência
dados_full_mapa <- dados_full_mapa %>%
mutate(cat_eficiencia = case_when(
eficiencia  > 90                     ~ "Muito Alta: eff > 90",
eficiencia  > 80  & eficiencia <= 90 ~ "Alta: 80 < eff < 90",
eficiencia  > 70  & eficiencia <= 80 ~ "Média Alta: 70 < eff < 80",
eficiencia  > 60  & eficiencia <= 70 ~ "Média: 60 < eff < 70",
eficiencia  > 50  & eficiencia <= 60 ~ "Média Baixa: 50 < eff < 60",
eficiencia  > 40  & eficiencia <= 50 ~ "Baixa: 40 < eff < 50",
eficiencia <= 40                    ~ "Muito Baixa: eff < 40",
TRUE                                 ~ NA_character_
)) %>%
mutate(cat_eficiencia = factor(cat_eficiencia,
levels = c("Muito Alta: eff > 90",
"Alta: 80 < eff < 90",
"Média Alta: 70 < eff < 80",
"Média: 60 < eff < 70",
"Média Baixa: 50 < eff < 60",
"Baixa: 40 < eff < 50",
"Muito Baixa: eff < 40")
))
# Plote — agora o geometry vem junto
dados_full_mapa %>%
filter(code_region == 4) %>%
ggplot() +
geom_sf(aes(fill = cat_eficiencia), color = NA) +
scale_fill_viridis_d(option = "mako", na.value = "grey90") +
labs(fill     = "Eficiência",
title    = "DEA: Eficiência dos Municípios do Sul - 2021") +
theme_void()
rm(list=ls())
graphics.off()
dados <- read_excel("dados/dados_finais.xlsx")
dados <- dados %>%
mutate(desp_2019 = (desp_ef_2019/mat_ef_2019)*prop_efai_2019,
desp_2021 = (desp_ef_2021/mat_ef_2021)*prop_efai_2021,
desp_2023 = (desp_ef_2023/mat_ef_2023)*prop_efai_2023)
dados <- dados %>%
mutate(
regiao = case_when(
sigla %in% c("AC", "AP", "AM", "PA", "RO", "RR", "TO") ~ "sul",
sigla %in% c("AL", "BA", "CE", "MA", "PB", "PE", "PI", "RN", "SE") ~ "Nordeste",
sigla %in% c("ES", "MG", "RJ", "SP") ~ "Sudeste",
sigla %in% c("PR", "RS", "SC") ~ "Sul",
sigla %in% c("DF", "GO", "MT", "MS") ~ "Centro-Oeste",
TRUE ~ NA_character_))
dados_full <- dados[complete.cases(dados), ]
dados_full <- dados_full %>%
filter(regiao == "Sul")
# Cuidando de um possível over point:
dados_full <- dados_full[dados_full$cod_ibge != 3170701, ]
# Rodando o DEA:
x2023 <- as.matrix(with(dados_full, desp_2023))
y2023 <- as.matrix(with(dados_full, ideb_2023))
dea.plot.frontier(x2023,y2023,txt=TRUE)
modelo2023 <- dea(x2023,y2023,RTS="vrs",ORIENTATION="out")
summary(modelo2023)
escores2023 <- data.frame(dados_full$nome,dados_full$sigla, eficiencia=1/(modelo2023=modelo2023$eff)*100)
escores2023 %>%
arrange(desc(eficiencia))
modelo2023 <- dea(x2023,y2023,RTS="vrs",ORIENTATION="in")
benchmarks2023 <- data.frame(dados_full$nome,dados_full$sigla,modelo2023=modelo2023$lambda)
benchmarks2023
colnames(escores2023)[colnames(escores2023) == "dados_full.nome"] <- "nome"
colnames(escores2023)[colnames(escores2023) == "dados_full.sigla"] <- "sigla"
dados_full <- dados_full %>%
left_join(escores2023, by = c("sigla","nome"))
frontier <- dados_full %>%
filter(eficiencia == 100) %>%   # substitua 'eficiencia' pelo nome da sua coluna
arrange(desp_2023)
# Obtém os extremos:
min_x_base <- dados_full %>%
filter(eficiencia == 100)                     # menor valor de x2019 dentre os eficientes
min_x <- min(min_x_base$desp_2023, na.rm = TRUE)
max_x_total <- max(dados_full$desp_2023, na.rm = TRUE)  # valor máximo de x2019 (pode ser da base completa)
min_y_base <- dados_full %>%
filter(eficiencia == 100) %>%                # menor valor de x2019 dentre os eficientes
filter(desp_2023 == min(desp_2023))
first_y <- min_y_base$ideb_2023                   # y do primeiro ponto eficiente
last_y_base <- dados_full %>%
filter(eficiencia == 100) %>%
filter(ideb_2023 == max(ideb_2023))
last_y <- last_y_base$ideb_2023
# Cria um novo dataframe com os pontos adicionais
frontier2 <- bind_rows(
tibble(desp_2023 = min_x, ideb_2023 = 0),    # ponto que liga ao eixo x (mínimo)
frontier,                          # pontos eficientes
tibble(desp_2023 = max_x_total, ideb_2023 = last_y)  # extensão horizontal até o x máximo
)
# Gráfico
g2023 <- ggplot(dados_full, aes(x = desp_2023, y = ideb_2023)) +
geom_point(aes(colour = sigla), size = 2) +
geom_line(data = frontier2, aes(x = desp_2023, y = ideb_2023),
color = "red", size = 1) +
geom_label_repel(data = filter(dados_full, eficiencia == 100),
aes(label = paste(nome, sigla, sep = " - ")),
fill = alpha("white", 0.5),
box.padding   = 0.5,
point.padding = 0.5,
segment.color = 'red',
size = 3) +
labs(
x = "Despesa média por aluno (R$)",
y = "IDEB",
title = "DEA 2023",
colour = "Estado"
) +
theme_classic()
g2023
# BoxPlot
bp2023 <- ggplot(dados_full, aes(x = sigla, y = eficiencia, fill = sigla)) +
geom_boxplot() +
stat_summary(fun = median, geom = "text",
aes(label = round(..y.., 1)),
vjust = -0.5,
color = "black",
size = 3) +
stat_summary(fun = function(x) quantile(x, probs = 0.25), geom = "text",
aes(label = round(..y.., 1)),
hjust = -3, vjust = 1.2, color = "black", size = 2) +
stat_summary(fun = function(x) quantile(x, probs = 0.75), geom = "text",
aes(label = round(..y.., 1)),
hjust = -3, vjust = -0.5, color = "black", size = 2) +
labs(x = "Estado", y = "Eficiência", title = "Boxplot da Eficiência por Estado - 2023") +
theme_classic() + guides(fill = FALSE)
bp2023
################################################################################
# Maps
################################################################################
# Leia municípios (sf) e já crie o cod_ibge
muni <- read_municipality(year = 2020) %>%
mutate(cod_ibge = as.character(code_muni))
# Prepare seu df de eficiência
df_eff <- dados_full %>%
mutate(cod_ibge = str_pad(as.character(cod_ibge), width = 7, pad = "0"))
# Junte garantindo que o primeiro objeto é um sf
dados_full_mapa <- muni %>%
left_join(df_eff, by = "cod_ibge")
# Crie a categoria de eficiência
dados_full_mapa <- dados_full_mapa %>%
mutate(cat_eficiencia = case_when(
eficiencia  > 90                     ~ "Muito Alta: eff > 90",
eficiencia  > 80  & eficiencia <= 90 ~ "Alta: 80 < eff < 90",
eficiencia  > 70  & eficiencia <= 80 ~ "Média Alta: 70 < eff < 80",
eficiencia  > 60  & eficiencia <= 70 ~ "Média: 60 < eff < 70",
eficiencia  > 50  & eficiencia <= 60 ~ "Média Baixa: 50 < eff < 60",
eficiencia  > 40  & eficiencia <= 50 ~ "Baixa: 40 < eff < 50",
eficiencia <= 40                    ~ "Muito Baixa: eff < 40",
TRUE                                 ~ NA_character_
)) %>%
mutate(cat_eficiencia = factor(cat_eficiencia,
levels = c("Muito Alta: eff > 90",
"Alta: 80 < eff < 90",
"Média Alta: 70 < eff < 80",
"Média: 60 < eff < 70",
"Média Baixa: 50 < eff < 60",
"Baixa: 40 < eff < 50",
"Muito Baixa: eff < 40")
))
# Plote — agora o geometry vem junto
dados_full_mapa %>%
filter(code_region == 4) %>%
ggplot() +
geom_sf(aes(fill = cat_eficiencia), color = NA) +
scale_fill_viridis_d(option = "mako", na.value = "grey90") +
labs(fill     = "Eficiência",
title    = "DEA: Eficiência dos Municípios do Sul - 2023") +
theme_void()
rm(list=ls())
graphics.off()
library(readxl)
library(dplyr)
library(tidyr)
# I) Importar e preparar os dados
dados_full <- read_excel("dados/dados_finais.xlsx") %>%
mutate(
desp_2019 = (desp_ef_2019 / mat_ef_2019) * prop_efai_2019,
desp_2021 = (desp_ef_2021 / mat_ef_2021) * prop_efai_2021,
desp_2023 = (desp_ef_2023 / mat_ef_2023) * prop_efai_2023,
regiao = case_when(
sigla %in% c("AC","AP","AM","PA","RO","RR","TO")        ~ "Norte",
sigla %in% c("AL","BA","CE","MA","PB","PE","PI","RN","SE") ~ "Nordeste",
sigla %in% c("ES","MG","RJ","SP")                       ~ "Sudeste",
sigla %in% c("PR","RS","SC")                           ~ "Sul",
sigla %in% c("DF","GO","MT","MS")                      ~ "Centro-Oeste",
TRUE                                                   ~ NA_character_
)
) %>%
drop_na(desp_2019, desp_2021, desp_2023,
ideb_2019, ideb_2021, ideb_2023)
# II) Estatística descritiva por região e variável
desc_stats <- dados_full %>%
pivot_longer(
cols      = matches("^(desp|ideb)_\\d{4}$"),
names_to  = c("variavel", "ano"),
names_sep = "_",
values_to = "valor"
) %>%
group_by(regiao, variavel, ano) %>%
summarise(
n        = n(),
média    = mean(valor, na.rm = TRUE),
mediana  = median(valor, na.rm = TRUE),
dp       = sd(valor, na.rm = TRUE),
mínimo   = min(valor, na.rm = TRUE),
máximo   = max(valor, na.rm = TRUE),
IQR      = IQR(valor, na.rm = TRUE),
.groups  = "drop"
)
rm(list=ls())
graphics.off()
library(readxl)
library(dplyr)   # certifica-se de carregar dplyr após qualquer outro pacote que defina n()
library(tidyr)
# I) Importar e preparar
dados_full <- read_excel("dados/dados_finais.xlsx") %>%
mutate(
desp_2019 = (desp_ef_2019 / mat_ef_2019) * prop_efai_2019,
desp_2021 = (desp_ef_2021 / mat_ef_2021) * prop_efai_2021,
desp_2023 = (desp_ef_2023 / mat_ef_2023) * prop_efai_2023,
regiao = case_when(
sigla %in% c("AC","AP","AM","PA","RO","RR","TO")        ~ "Norte",
sigla %in% c("AL","BA","CE","MA","PB","PE","PI","RN","SE") ~ "Nordeste",
sigla %in% c("ES","MG","RJ","SP")                       ~ "Sudeste",
sigla %in% c("PR","RS","SC")                           ~ "Sul",
sigla %in% c("DF","GO","MT","MS")                      ~ "Centro-Oeste",
TRUE                                                   ~ NA_character_
)
) %>%
drop_na(desp_2019, desp_2021, desp_2023,
ideb_2019, ideb_2021, ideb_2023)
# II) Estatística descritiva por região e variável
desc_stats <- dados_full %>%
pivot_longer(
cols      = matches("^(desp|ideb)_\\d{4}$"),
names_to  = c("variavel", "ano"),
names_sep = "_",
values_to = "valor"
) %>%
group_by(regiao, variavel, ano) %>%
summarise(
n       = dplyr::n(),
media   = mean(valor, na.rm = TRUE),
mediana = median(valor, na.rm = TRUE),
dp      = sd(valor, na.rm = TRUE),
minimo  = min(valor, na.rm = TRUE),
maximo  = max(valor, na.rm = TRUE),
IQR     = IQR(valor, na.rm = TRUE),
.groups = "drop"
)
View(dados_full)
rm(list=ls())
graphics.off()
library(readxl)
library(dplyr)
library(tidyr)
# I) Importar e preparar
dados_full <- read_excel("dados/dados_finais.xlsx") %>%
mutate(
desp_2019 = (desp_ef_2019 / mat_ef_2019) * prop_efai_2019,
desp_2021 = (desp_ef_2021 / mat_ef_2021) * prop_efai_2021,
desp_2023 = (desp_ef_2023 / mat_ef_2023) * prop_efai_2023,
regiao = case_when(
sigla %in% c("AC","AP","AM","PA","RO","RR","TO")         ~ "Norte",
sigla %in% c("AL","BA","CE","MA","PB","PE","PI","RN","SE") ~ "Nordeste",
sigla %in% c("ES","MG","RJ","SP")                        ~ "Sudeste",
sigla %in% c("PR","RS","SC")                            ~ "Sul",
sigla %in% c("DF","GO","MT","MS")                       ~ "Centro-Oeste",
TRUE                                                    ~ NA_character_
)
) %>%
drop_na(desp_2019, desp_2021, desp_2023,
ideb_2019, ideb_2021, ideb_2023)
# II) Estatística descritiva por região e variável
desc_stats <- dados_full %>%
pivot_longer(
cols      = matches("^(desp|ideb)_\\d{4}$"),
names_to  = c("variavel", "ano"),
names_sep = "_",
values_to = "valor"
) %>%
group_by(regiao, variavel, ano) %>%
summarise(
n       = length(valor),
media   = mean(valor, na.rm = TRUE),
mediana = median(valor, na.rm = TRUE),
dp      = sd(valor, na.rm = TRUE),
minimo  = min(valor, na.rm = TRUE),
maximo  = max(valor, na.rm = TRUE),
IQR     = IQR(valor, na.rm = TRUE),
.groups = "drop"
)
# Visualizar
print(desc_stats)
summary_regiao <- dados_full %>%
group_by(regiao) %>%
summarise(
across(
c(desp_2019, desp_2021, desp_2023,
ideb_2019, ideb_2021, ideb_2023),
list(
media   = ~ mean(.x, na.rm = TRUE),
mediana = ~ median(.x, na.rm = TRUE),
sd      = ~ sd(.x,   na.rm = TRUE),
minimo  = ~ min(.x,  na.rm = TRUE),
maximo  = ~ max(.x,  na.rm = TRUE)
),
.names = "{.col}_{.fn}"
),
.groups = "drop"
)
View(dados_full)
print(summary_regiao)
summary_regiao <- dados_full %>%
group_by(regiao) %>%
summarise_at(
vars(desp_2019, desp_2021, desp_2023,
ideb_2019, ideb_2021, ideb_2023),
list(
media   = ~ mean(.    , na.rm = TRUE),
mediana = ~ median(.  , na.rm = TRUE),
sd      = ~ sd(.      , na.rm = TRUE),
minimo  = ~ min(.     , na.rm = TRUE),
maximo  = ~ max(.     , na.rm = TRUE)
)
) %>%
ungroup()
print(summary_regiao)
# 1) Converte para data.frame
summary_regiao_df <- as.data.frame(summary_regiao)
View(summary_regiao_df)
# 2) Instala e carrega o pacote xlsx (caso ainda não tenha)
library(xlsx)
# 2) Instala e carrega o pacote xlsx (caso ainda não tenha)
if (!requireNamespace("xlsx", quietly = TRUE)) install.packages("xlsx")
library(readxl)
# 2) Salva em arquivo .xls
write.xlsx(summary_regiao_df, "results/estatisticas_descritivas.xlsx")
# 2) Salva em arquivo .xls
library(xlsx)
write.xlsx(summary_regiao_df, "results/estatisticas_descritivas.xlsx")
# partindo de 'dados_full' já preparado
df_resultados <- dados_full %>%
pivot_longer(
cols      = c(desp_2019, desp_2021, desp_2023,
ideb_2019, ideb_2021, ideb_2023),
names_to  = c("variavel", "ano"),
names_sep = "_",
values_to = "valor"
) %>%
# opcional: renomear chaves para apresentação
mutate(
variavel = recode(variavel,
desp = "Despesa por aluno",
ideb = "IDEB")
) %>%
group_by(regiao, ano, variavel) %>%
summarise(
Média          = mean(valor, na.rm = TRUE),
Mediana        = median(valor, na.rm = TRUE),
Mínimo         = min(valor, na.rm = TRUE),
Máximo         = max(valor, na.rm = TRUE),
`Desvio-Padrão` = sd(valor, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(regiao, ano, variavel)
rm(list=ls())
graphics.off()
# I) Importar e preparar
dados_full <- read_excel("dados/dados_finais.xlsx") %>%
mutate(
desp_2019 = (desp_ef_2019 / mat_ef_2019) * prop_efai_2019,
desp_2021 = (desp_ef_2021 / mat_ef_2021) * prop_efai_2021,
desp_2023 = (desp_ef_2023 / mat_ef_2023) * prop_efai_2023,
regiao = case_when(
sigla %in% c("AC","AP","AM","PA","RO","RR","TO")         ~ "Norte",
sigla %in% c("AL","BA","CE","MA","PB","PE","PI","RN","SE") ~ "Nordeste",
sigla %in% c("ES","MG","RJ","SP")                        ~ "Sudeste",
sigla %in% c("PR","RS","SC")                            ~ "Sul",
sigla %in% c("DF","GO","MT","MS")                       ~ "Centro-Oeste",
TRUE                                                    ~ NA_character_
)
) %>%
drop_na(desp_2019, desp_2021, desp_2023,
ideb_2019, ideb_2021, ideb_2023)
# II) Estatística descritiva por região e variável
desc_stats <- dados_full %>%
pivot_longer(
cols      = matches("^(desp|ideb)_\\d{4}$"),
names_to  = c("variavel", "ano"),
names_sep = "_",
values_to = "valor"
) %>%
group_by(regiao, variavel, ano) %>%
summarise(
n       = length(valor),
media   = mean(valor, na.rm = TRUE),
mediana = median(valor, na.rm = TRUE),
dp      = sd(valor, na.rm = TRUE),
minimo  = min(valor, na.rm = TRUE),
maximo  = max(valor, na.rm = TRUE),
IQR     = IQR(valor, na.rm = TRUE),
.groups = "drop"
)
# Visualizar
print(desc_stats)
# partindo de 'dados_full' já preparado
df_resultados <- dados_full %>%
pivot_longer(
cols      = c(desp_2019, desp_2021, desp_2023,
ideb_2019, ideb_2021, ideb_2023),
names_to  = c("variavel", "ano"),
names_sep = "_",
values_to = "valor"
) %>%
# opcional: renomear chaves para apresentação
mutate(
variavel = recode(variavel,
desp = "Despesa por aluno",
ideb = "IDEB")
) %>%
group_by(regiao, ano, variavel) %>%
summarise(
Média          = mean(valor, na.rm = TRUE),
Mediana        = median(valor, na.rm = TRUE),
Mínimo         = min(valor, na.rm = TRUE),
Máximo         = max(valor, na.rm = TRUE),
`Desvio-Padrão` = sd(valor, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(regiao, ano, variavel)
df_resultados <- dados_full %>%
# 1) "empilha" os anos e variáveis em colunas
pivot_longer(
cols      = matches("^(desp|ideb)_\\d{4}$"),
names_to  = c("variavel", "ano"),
names_sep = "_",
values_to = "valor"
) %>%
# 2) ajusta os nomes para apresentação
mutate(
variavel = dplyr::recode(variavel,
desp = "Despesa por aluno",
ideb = "IDEB"),
ano = as.integer(ano)
) %>%
# 3) calcula estatísticas por região × ano × variável
dplyr::group_by(regiao, ano, variavel) %>%
dplyr::summarise(
Média          = mean(valor, na.rm = TRUE),
Mediana        = median(valor, na.rm = TRUE),
Mínimo         = min(valor, na.rm = TRUE),
Máximo         = max(valor, na.rm = TRUE),
`Desvio-Padrão` = sd(valor, na.rm = TRUE),
.groups = "drop"
)
# Veja o resultado
print(df_resultados)
# 1) Converte para data.frame
summary_regiao_df <- as.data.frame(df_resultados)
# 2) Salva em arquivo .xls
library(xlsx)
write.xlsx(summary_regiao_df, "results/estatisticas_descritivas.xlsx")
write.xlsx(summary_regiao_df, "results/estatisticas_descritivas.xlsx")
